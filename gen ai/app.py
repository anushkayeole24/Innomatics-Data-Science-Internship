import streamlit as st
from langchain_core.messages import SystemMessage
from langchain_core.prompts import ChatPromptTemplate, HumanMessagePromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.output_parsers import StrOutputParser
from langchain_community.document_loaders import PDFMinerLoader
from langchain_text_splitters import NLTKTextSplitter
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from langchain_community.vectorstores import Chroma
from langchain_core.runnables import RunnablePassthrough

# create a gemini_key.text and paste ur key their
with open('key\.genaikey.txt') as f: 
    KEY = f.read()

#****************************
# Custom CSS styling for the title and header elements
custom_css = """
<style>
    .stApp{
        background-color: #E0ECED;
        padding: 10px;
        border-radius: 20px;
    }
    .title {
        color: #333333;
        font-size: 28px;
        font-weight: bold;
        text-transform: uppercase;
        margin-bottom: 10px;
    }
    
    .header {
        color: #008080;
        font-size: 22px;
        font-style: italic;
        margin-bottom: 20px;
    }
</style>

"""

# Display the custom CSS styles
st.markdown(custom_css, unsafe_allow_html=True)

# Display the title with the styled CSS
st.markdown("<div class='title'>RAG SYSTEM: Leave no context behind.</div>", unsafe_allow_html=True)

# Display the header with the styled CSS
st.markdown("<div class='header'>ðŸ“œ</div>", unsafe_allow_html=True)

#***************************

custom_css = """
<style>
    /* Button styling */
    .stButton button {
        background-color: #2E8B57;
        color: white;
        border: none;
        border-radius: 10px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        margin-top: 20px;
    }
    .stButton button:hover {
        background-color: #3CB371;
    }

    /* Output display styling */
    .output-container {
        background-color: #f9f9f9;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 10px;
        margin-top: 20px;
    }
</style>
"""

# getting the input from  user input
user_input = st.text_area("Type Your Query Here!!!")

# button to trigger answer generation
if st.button("Results"):
    # now , define chat prompt template
    chat_template = ChatPromptTemplate.from_messages([
        SystemMessage(content="""Hey there! I'm your friendly AI assistant. 
        I'm here to provide you with insightful answers based on your questions and context."""),
        HumanMessagePromptTemplate.from_template("""Let's uncover some insights together!
        Context:
        {context}
        
        Your Question: 
        {question}
        
        My Response: """)
    ])


    # now loading Google Generative AI model
    chat_model = ChatGoogleGenerativeAI(google_api_key=KEY, model="gemini-1.5-pro-latest")

    # the StrOutputParser is used to parse the output generated by the conversational model (in this case, the Google Generative AI model) into a string format.
    output_parser = StrOutputParser()

    # now defining the pdf loader
    pdf_loader = PDFMinerLoader(r"Leave no context behind.pdf")
    pdf_docs = pdf_loader.load()

    # split PDF documents into chunks
    text_splitter = NLTKTextSplitter(chunk_size=500, chunk_overlap=100)
    chunks = text_splitter.split_documents(pdf_docs)

    # create embeddings for the chunks
    embedding_model = GoogleGenerativeAIEmbeddings(google_api_key=KEY, model="models/embedding-001")
    db = Chroma.from_documents(chunks, embedding_model, persist_directory="./my_chroma_db_")

    # define retriever and format docs function
    retriever = db.as_retriever(search_kwargs={"k": 5})
    def format_docs(docs):
        return "\n\n".join(doc.page_content for doc in docs)

    # define RAG chain
    rag_chain = (
        {"context": retriever | format_docs, "question": RunnablePassthrough()}
        | chat_template
        | chat_model
        | output_parser
    )

    # now invoke RAG chain to generate answer
    response = rag_chain.invoke(user_input)

    # display answer
    st.subheader("Question")
    st.title(user_input)
    st.subheader("Answer:")
    st.markdown("<div class='output-container'>" + response + "</div>", unsafe_allow_html=True)
    

    